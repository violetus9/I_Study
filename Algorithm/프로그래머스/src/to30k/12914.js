// 멀리 뛰기

function solution(n) {
	// 1 or 2

	// 1: 1 // 1
	// 2: 1,1 2 // 2
	// 3: 1,1,1 1,2 2,1 // 3
	// 4: 1,1,1,1 1,1,2 1,2,1 2,1,1 2,2 // 5
	// 5: 1,1,1,1,1(1) 1,1,1,2(4) 1,2,2(3) // 8
	// 6: 1(1) 1,1,1,1,2(5) 1,1,2,2(6) 222(1) // 13

	const dp = [0, 1, 2];

	for (let i = 3; i <= n; i++) {
		dp[i] = (dp[i - 1] + dp[i - 2]) % 1234567;
	}

	return dp[n];
}

console.log(solution(4));
console.log(solution(3));

/* 조합의 경우가 3인 경우 */

// 1, 2, 3

// 1: 1(1)  >> 1
// 2: 1(1) 2(1) >> 2
// 3: 1(1) 12(2) 3(1) >> 4
// 4: 1(1) 112(3) 22(1) 13(2) >> 7
// 5: 1(1) 1112(4) 122(3) 113(3) 23(2) >> 13
// 6: 1(1) 11112(5) 1122(6) 222(1) 33(1) 123(6) 1113(4) >> 24

// 조합수가 n개라면 목적인 N을 달성하기 위해선 이전 조합의 n개만큼 합쳐야 한다
// N(n===3) = N-1 + N-2 + N-3
// => 피보나치

// 근데 레벨 3짜리 맞나 싶음;
